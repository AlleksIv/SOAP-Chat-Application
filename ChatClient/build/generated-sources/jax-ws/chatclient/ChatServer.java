
package chatclient;

import java.util.List;
import javax.jws.Oneway;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "ChatServer", targetNamespace = "http://chatserver/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ChatServer {


    /**
     * 
     * @param user
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "join", targetNamespace = "http://chatserver/", className = "chatclient.Join")
    @ResponseWrapper(localName = "joinResponse", targetNamespace = "http://chatserver/", className = "chatclient.JoinResponse")
    @Action(input = "http://chatserver/ChatServer/joinRequest", output = "http://chatserver/ChatServer/joinResponse")
    public boolean join(
        @WebParam(name = "user", targetNamespace = "")
        String user);

    /**
     * 
     * @param message
     */
    @WebMethod
    @Oneway
    @RequestWrapper(localName = "sendMessage", targetNamespace = "http://chatserver/", className = "chatclient.SendMessage")
    @Action(input = "http://chatserver/ChatServer/sendMessage")
    public void sendMessage(
        @WebParam(name = "message", targetNamespace = "")
        Message message);

    /**
     * 
     * @param user
     * @return
     *     returns java.util.List<chatclient.Message>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getMessages", targetNamespace = "http://chatserver/", className = "chatclient.GetMessages")
    @ResponseWrapper(localName = "getMessagesResponse", targetNamespace = "http://chatserver/", className = "chatclient.GetMessagesResponse")
    @Action(input = "http://chatserver/ChatServer/getMessagesRequest", output = "http://chatserver/ChatServer/getMessagesResponse")
    public List<Message> getMessages(
        @WebParam(name = "user", targetNamespace = "")
        String user);

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getClientList", targetNamespace = "http://chatserver/", className = "chatclient.GetClientList")
    @ResponseWrapper(localName = "getClientListResponse", targetNamespace = "http://chatserver/", className = "chatclient.GetClientListResponse")
    @Action(input = "http://chatserver/ChatServer/getClientListRequest", output = "http://chatserver/ChatServer/getClientListResponse")
    public List<String> getClientList();

    /**
     * 
     * @return
     *     returns long
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getLastUserUpdate", targetNamespace = "http://chatserver/", className = "chatclient.GetLastUserUpdate")
    @ResponseWrapper(localName = "getLastUserUpdateResponse", targetNamespace = "http://chatserver/", className = "chatclient.GetLastUserUpdateResponse")
    @Action(input = "http://chatserver/ChatServer/getLastUserUpdateRequest", output = "http://chatserver/ChatServer/getLastUserUpdateResponse")
    public long getLastUserUpdate();

    /**
     * 
     * @param user
     */
    @WebMethod
    @Oneway
    @RequestWrapper(localName = "leave", targetNamespace = "http://chatserver/", className = "chatclient.Leave")
    @Action(input = "http://chatserver/ChatServer/leave")
    public void leave(
        @WebParam(name = "user", targetNamespace = "")
        String user);

}
